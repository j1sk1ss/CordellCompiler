from "string.cpl" import prints gets;

:
Brainfuck interpriter on CPL
For work test, input "++++++++[>++++++++<-]>+." sequence. Interpriter should return 'A' character.
Also hello world program
++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.

Or tick-tac-toe

:

start
    str welcomeMsg = "Brainfuck interpriter! Input code ";
    prints welcomeMsg 34;

    arr code 10000 char =;
    gets code 10000;

    char brk = 0;
    int codelength = 0;
    while code[codelength] != brk; {
        codelength = codelength + 1;
    }

    arr bracketmap 10000 int =;
    arr stack 10000 int =;
    int stackptr = 0;
    int pos = 0;

    char plus           = 43; : + :
    char minus          = 45; : - :
    char dot            = 46; : . :
    char comma          = 44; : , :
    char leftMove       = 60; : < :
    char rightMove      = 62; : > :
    char openBracket    = 91; : [ :
    char closedBracket  = 93; : ] :

    while pos < codelength; {
        char c = code[pos];
        int handled = 0;

        if c == openBracket; {
            stack[stackptr] = pos;
            stackptr = stackptr + 1;
            handled = 1;
        }
        
        if handled == 0; {
            if c == closedBracket; {
                if stackptr > 0; {
                    stackptr = stackptr - 1;
                    int matchpos = stack[stackptr];
                    bracketmap[pos] = matchpos;
                    bracketmap[matchpos] = pos;
                }

                handled = 1;
            }
        }
        
        pos = pos + 1;
    }
    
    arr tape 30000 char =;
    int pointer = 0;
    int pc = 0;

    while pc < codelength; {
        char cmd = code[pc];
        int processed = 0;
        
        if cmd == rightMove; {
            pointer = pointer + 1;
            pc = pc + 1;
            processed = 1;
        }

        if processed == 0; {
            if cmd == leftMove; {
                pointer = pointer - 1;
                pc = pc + 1;
                processed = 1;
            }
        }

        if processed == 0; {
            if cmd == plus; {
                tape[pointer] = tape[pointer] + 1;
                pc = pc + 1;
                processed = 1;
            }
        }
        
        if processed == 0; {
            if cmd == minus; {
                tape[pointer] = tape[pointer] - 1;
                pc = pc + 1;
                processed = 1;
            }
        }
        
        if processed == 0; {
            if cmd == dot; {
                str fbuf = " ";
                fbuf[0] = tape[pointer];
                prints fbuf 1;
                pc = pc + 1;
                processed = 1;
            }
        }
        
        if processed == 0; {
            if cmd == comma; {
                str sbuf = " ";
                gets sbuf 1;
                tape[pointer] = sbuf[0];
                pc = pc + 1;
                processed = 1;
            }
        }
        
        if processed == 0; {
            if cmd == openBracket; {
                if tape[pointer] == brk; {
                    pc = bracketmap[pc] + 1;
                }
                if tape[pointer] != brk; {
                    pc = pc + 1;
                }
                processed = 1;
            }
        }
        
        if processed == 0; {
            if cmd == closedBracket; {
                if tape[pointer] != brk; {
                    pc = bracketmap[pc] + 1;
                }
                if tape[pointer] == brk; {
                    pc = pc + 1;
                }
                processed = 1;
            }
        }
        
        if processed == 0; {
            pc = pc + 1;
        }
    }

exit 0;