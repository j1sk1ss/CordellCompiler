{
    from "stdio.cpl" import puts, putc, gets;

:
    Brainfuck interpriter on CPL
    For work test, input ++++++++[>++++++++<-]>+. sequence. Interpriter should return 'A' character.
    Also hello world program
    ++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.

    Or tick-tac-toe

:

    glob arr tape[30000, i8] =;
    glob arr code[10000, i8] =;
    glob arr bracketmap[10000, i32] =;
    glob arr stack[10000, i32] =;

    start() {
        puts("Brainfuck interpriter! Input code: ");

        i32 pos = 0;
        i32 stackptr = 0;
        i32 codelength = gets(code, 10000);
        while pos < codelength; {
            i8 c = code[pos];
            switch c; {
                case '['; {
                    stack[stackptr] = pos;
                    stackptr = stackptr + 1;
                }
                case ']'; {
                    if stackptr > 0; {
                        stackptr = stackptr - 1;
                        i32 matchpos = stack[stackptr];
                        bracketmap[pos] = matchpos;
                        bracketmap[matchpos] = pos;
                    }
                }
            }
            
            pos = pos + 1;
        }
        
        i32 pc = 0;
        i32 pointer = 0;

        while pc < codelength; {
            switch code[pc]; {
                case '>'; {
                    pointer = pointer + 1;
                    pc = pc + 1;
                }
                case '<'; {
                    pointer = pointer - 1;
                    pc = pc + 1;
                }
                case '+'; {
                    tape[pointer] = tape[pointer] + 1;
                    pc = pc + 1;
                }
                case '-'; {
                    tape[pointer] = tape[pointer] - 1;
                    pc = pc + 1;
                }
                case '.'; {
                    putc(tape[pointer]);
                    pc = pc + 1;
                }
                case ','; {
                    gets(ref tape[pointer], 1);
                    pc = pc + 1;
                }
                case '['; {
                    if not tape[pointer]; {
                        pc = bracketmap[pc];
                    }
                    else {
                        pc = pc + 1;
                    }
                }
                case ']'; {
                    if tape[pointer]; {
                        pc = bracketmap[pc];
                    }
                    else {
                        pc = pc + 1;
                    }
                }
                default {
                    pc = pc + 1;
                }
            }
        }

        exit 1;
    }
}