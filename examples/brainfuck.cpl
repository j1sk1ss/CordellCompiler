:
Brainfuck interpriter on CPL
For work test, input "++++++++[>++++++++<-]>+." sequence. Interpriter should return 'A' character.
Also hello world program
++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.
:

start
    function printStr int ptr; int size; fstart
    :
        Print string to console.
        Params 
            - ptr - Pointer to string.
            - size - String size.
    :
        syscall 4 1 ptr size;
    fend 1;

    str welcomeMsg = "Brainfuck interpriter! Input code ";
    callfunc printStr welcomeMsg 34;

    arr code 10000 1 =;
    syscall 3 0 code 10000;

    char brk = 0;
    int codelength = 0;
    while code[codelength] != brk; lstart
        codelength = codelength + 1;
    lend

    arr bracketmap 10000 4 =;
    arr stack 10000 4 =;
    int stackptr = 0;
    int pos = 0;

    char plus           = 43; : + :
    char minus          = 45; : - :
    char dot            = 46; : . :
    char comma          = 44; : , :
    char leftMove       = 60; : < :
    char rightMove      = 62; : > :
    char openBracket    = 91; : [ :
    char closedBracket  = 93; : ] :

    while pos < codelength; lstart
        char c = code[pos];
        int handled = 0;

        if c == openBracket; ifstart
            stack[stackptr] = pos;
            stackptr = stackptr + 1;
            handled = 1;
        ifend
        
        if handled == 0; ifstart
            if c == closedBracket; ifstart
                if stackptr > 0; ifstart
                    stackptr = stackptr - 1;
                    int matchpos = stack[stackptr];
                    bracketmap[pos] = matchpos;
                    bracketmap[matchpos] = pos;
                ifend

                handled = 1;
            ifend
        ifend
        
        pos = pos + 1;
    lend
    
    arr tape 30000 1 =;
    int pointer = 0;
    int pc = 0;

    while pc < codelength; lstart
        char cmd = code[pc];
        int processed = 0;
        
        if cmd == rightMove; ifstart
            pointer = pointer + 1;
            pc = pc + 1;
            processed = 1;
        ifend

        if processed == 0; ifstart
            if cmd == leftMove; ifstart
                pointer = pointer - 1;
                pc = pc + 1;
                processed = 1;
            ifend
        ifend

        if processed == 0; ifstart
            if cmd == plus; ifstart
                tape[pointer] = tape[pointer] + 1;
                pc = pc + 1;
                processed = 1;
            ifend
        ifend
        
        if processed == 0; ifstart
            if cmd == minus; ifstart
                tape[pointer] = tape[pointer] - 1;
                pc = pc + 1;
                processed = 1;
            ifend
        ifend
        
        if processed == 0; ifstart
            if cmd == dot; ifstart
                str fbuf = "  ";
                fbuf[0] = tape[pointer];
                callfunc printStr fbuf 2;
                pc = pc + 1;
                processed = 1;
            ifend
        ifend
        
        if processed == 0; ifstart
            if cmd == comma; ifstart
                str sbuf = "  ";
                syscall 3 0 sbuf 1;
                tape[pointer] = sbuf[0];
                pc = pc + 1;
                processed = 1;
            ifend
        ifend
        
        if processed == 0; ifstart
            if cmd == openBracket; ifstart
                if tape[pointer] == brk; ifstart
                    pc = bracketmap[pc] + 1;
                ifend
                if tape[pointer] != brk; ifstart
                    pc = pc + 1;
                ifend
                processed = 1;
            ifend
        ifend
        
        if processed == 0; ifstart
            if cmd == closedBracket; ifstart
                if tape[pointer] != brk; ifstart
                    pc = bracketmap[pc] + 1;
                ifend
                if tape[pointer] == brk; ifstart
                    pc = pc + 1;
                ifend
                processed = 1;
            ifend
        ifend
        
        if processed == 0; ifstart
            pc = pc + 1;
        ifend
    lend

exit 0;